@startuml
skinparam classAttributeIconSize 0

title Logical View

class Interface {
    - editingTicket: boolean

    + startProcess(): void
    + displayMessage(string Message): void
    + countCash(): void
}

class Ticket {
    - name: string
    - ticketType: string
    - startingLocation: RailwayStation
    - destination: RailwayStation
    - cost: float

    + setName(): void
    + setTicketType(): void
    + setDestination(): void
    + calculateTicketCost(RailwayStation: currentStation,\n RailwayStation: destination): float

}

class RailwayStation {
    - coordinates[]: float
    - district: boolean
    - available: boolean

}

class ConnectionDB {
    - connection: string
    - user: string
    - password: string
    - listOfRailwayStations: RailwayStation[]

    + updateRailwayStations() : void
}

class Printer {
    - ticketToPrint: Ticket

    +setTicketToPrint(Ticket: ticket): void
    +printTicket(): boolean
}

Interface "1" *-- "1" Ticket : creates
Interface "1" -- "1" Printer : uses
Ticket "1" -- "1" Printer : uses
Ticket "1" -- "0...2" RailwayStation : has
ConnectionDB "1" -- "1...*" RailwayStation : has
Ticket "1" -- "1" "ConnectionDB" : uses
@enduml

@startuml
skinparam classAttributeIconSize 0

title Process View
autoactivate off
albert -> Interface : clicks on "Start", triggers startProcess()
activate Interface
Interface -> Ticket ** : create


albert -> Interface: types name

Interface -> Ticket: setName()
activate Ticket
Ticket --> Interface: void
deactivate Ticket

albert -> Interface: selects ticket type
Interface -> Ticket: setTicketType()
activate Ticket
Ticket --> Interface: void
deactivate Ticket

albert -> Interface: types destination
Interface -> Ticket: setDestination()
activate Ticket
Ticket -> ConnectionDB : updateRailwayStations()
activate ConnectionDB
ConnectionDB --> Ticket
deactivate ConnectionDB


Ticket -> Ticket : calculateTicketCost()
activate Ticket
Ticket -> Interface: displayMessage("Current Price: ....")
activate Interface
Interface --> albert: Display "Current Price: 14$. Pay with cash:"
return void
return void
return void

deactivate Interface

albert -> Interface: pays with cash, triggers countCash()
activate Interface
alt money > price
    Interface -> Printer: setTicketToPrint()
    activate Printer
    Printer -> Printer: printTicket()
    activate Printer
    Printer --> Interface: true
    deactivate Printer
    return void

alt money = price
    Interface --> Interface: displayMessage(...)
    Interface --> albert: Display "Ticket printed"
else
    Interface --> Interface: displayMessage(...)
    Interface --> albert: Display "Ticket printe, take change."
end
else money < price
    Interface --> Interface: displayMessage(...)
    Interface --> albert: Display "Not enough money"
end

return




@enduml

@startuml
title Development View

package "Ticket Machine" {

    Folder "Interface"
    Folder "Ticket"
    Folder "Printer"


}

package "Railway Stations" {
    Folder "ConnectionDB"
    Folder "RailwayStation"
}

Ticket "1" -- "2..*" RailwayStation : has
Interface "1" *-- "1" Ticket : creates
Interface "1" -- "1" Printer : uses
Ticket "1" -- "1" Printer : uses
"ConnectionDB" "1" -- "1...*" RailwayStation : has
@enduml


@startuml
title Deployment View

actor albert

node "Ticket Machine" {
    component "Interface"
    component "Ticket"
    component "Printer"
}

node "Database" {
    component "RailwayStation"
    component "ConnectionDB"
}

albert -> Interface : interacts
Interface -> Ticket : creates
Interface -> Printer : uses
Ticket -> Printer : uses
Ticket -> RailwayStation : has
ConnectionDB -> RailwayStation : has


@enduml